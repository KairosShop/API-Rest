{
  "openapi": "3.0.1",
  "info": {
    "title": "Kairos Shop",
    "description": "API Kairos shop.",
    "termsOfService": "https://api.kairosshop.xyz/",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.kairosshop.xyz/api"
    }
  ],
  "tags": [
    {
      "name": "products",
      "description": "Everything about your products"
    },
    {
      "name": "categories",
      "description": "Everything about your categories"
    },
    {
      "name": "subcategories",
      "description": "Everything about your subcategories"
    },
    {
      "name": "measures",
      "description": "Everything about your measures"
    },
    {
      "name": "users",
      "description": "Everything about your users"
    }
  ],
  "paths": {
    "/products": {
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Add a new product to the store",
        "operationId": "createProduct",
        "requestBody": {
          "description": "Product object that needs to be add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "products"
        ],
        "summary": "get all products",
        "description": "get all products, optional with params",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "The title values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id_category",
            "in": "query",
            "description": "The id_category values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id_subcategory",
            "in": "query",
            "description": "The id_subcategory values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "The quantity values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id_measure",
            "in": "query",
            "description": "The id_measure values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "The active values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The limit values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/products/{idProduct}": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Find product by id",
        "description": "Returns a single product",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "products"
        ],
        "summary": "Update an existing product",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "description": "Product id to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Product object that needs to be update to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "products"
        ],
        "summary": "Delete product",
        "operationId": "removeProduct",
        "parameters": [
          {
            "name": "idProduct",
            "in": "path",
            "description": "Product id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "tags": [
          "categories"
        ],
        "summary": "Add a new category to the store",
        "operationId": "createCategory",
        "requestBody": {
          "description": "Category object that needs to be add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "get all categories",
        "description": "get all categories, optional with params category",
        "operationId": "getCategories",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Category values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{idCategory}": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Find category by id",
        "description": "Returns a single category",
        "operationId": "getCategory",
        "parameters": [
          {
            "name": "idCategory",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "categories"
        ],
        "summary": "Update an existing category",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "idCategory",
            "in": "path",
            "description": "Category id to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Category object that needs to be update to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "categories"
        ],
        "summary": "Delete category",
        "operationId": "removeCategory",
        "parameters": [
          {
            "name": "idCategory",
            "in": "path",
            "description": "Category id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/subcategories": {
      "post": {
        "tags": [
          "subcategories"
        ],
        "summary": "Add a new subcategory to the store",
        "operationId": "createSubcategory",
        "requestBody": {
          "description": "Subcategory object that needs to be add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subcategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/subcategories/{idSubcategory}": {
      "put": {
        "tags": [
          "subcategories"
        ],
        "summary": "Update an existing subcategory",
        "operationId": "updateSubcategory",
        "parameters": [
          {
            "name": "idSubcategory",
            "in": "path",
            "description": "Subcategory id to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Subcategory object that needs to be update to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subcategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "subcategories"
        ],
        "summary": "Delete subcategory",
        "operationId": "removeSubcategory",
        "parameters": [
          {
            "name": "idSubcategory",
            "in": "path",
            "description": "Subcategory id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "subcategories"
        ],
        "summary": "Find subcategory by id",
        "description": "Returns a single subcategory",
        "operationId": "getSubcategory",
        "parameters": [
          {
            "name": "idSubcategory",
            "in": "path",
            "description": "ID of subcategory to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/subcategories/category/{idCategory}": {
      "get": {
        "tags": [
          "subcategories"
        ],
        "summary": "get all subcategories by idCategory",
        "description": "get all subcategories by idCategory, optional with params subcategory",
        "operationId": "getSubcategories",
        "parameters": [
          {
            "name": "idCategory",
            "in": "path",
            "description": "ID of category to return child subcategories",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "subcategory",
            "in": "query",
            "description": "Subcategory values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/measures": {
      "get": {
        "tags": [
          "measures"
        ],
        "summary": "get all measures",
        "description": "get all measures, optional with params measure",
        "operationId": "getMeasures",
        "parameters": [
          {
            "name": "measure",
            "in": "query",
            "description": "Measure values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/measures/{idMeasure}": {
      "get": {
        "tags": [
          "measures"
        ],
        "summary": "Find measures by id",
        "description": "Returns a single measure",
        "operationId": "getMeasure",
        "parameters": [
          {
            "name": "idMeasure",
            "in": "path",
            "description": "ID of measure to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a new user to the store",
        "operationId": "createUser",
        "requestBody": {
          "description": "User object that needs to be add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "users"
        ],
        "summary": "get all users",
        "description": "get all users, optional with params",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "email values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "firtName",
            "in": "query",
            "description": "firtName values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "lastName values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "rol",
            "in": "query",
            "description": "rol  values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string",
                "enum": [
                  "admin",
                  "customer",
                  "super market"
                ]
              }
            }
          },
          {
            "name": "verified",
            "in": "query",
            "description": "verified  values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "items": {
                "type": "integer",
                "enum": [
                  1,
                  0
                ]
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "active values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "items": {
                "type": "integer",
                "enum": [
                  1,
                  0
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/users/{idUser}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Find user by id",
        "description": "Returns a single user",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "idUser",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update an existing user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "idUser",
            "in": "path",
            "description": "User id to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "User object that needs to be update to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "operationId": "removeUser",
        "parameters": [
          {
            "name": "idUser",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/supermarket": {
      "post": {
        "tags": [
          "supermarket"
        ],
        "summary": "Add a new supermarket to the store",
        "operationId": "createSupermarket",
        "requestBody": {
          "description": "Supermarket object that needs to be add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Supermarket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "supermarket"
        ],
        "summary": "get all supermarkets",
        "description": "get all supermarkets, optional with params",
        "operationId": "getSupermarkets",
        "parameters": [
          {
            "name": "supermarket",
            "in": "query",
            "description": "The supermarket values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string",
                "minLength": 3
              }
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "The address values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string",
                "minLength": 3
              }
            }
          },
          {
            "name": "id_user",
            "in": "query",
            "description": "The id_user values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "The active values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "items": {
                "enum": [
                  1,
                  0
                ]
              }
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "items": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The limit values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page values that optional to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    },
    "/supermarket/{idSupermarket}": {
      "get": {
        "tags": [
          "supermarket"
        ],
        "summary": "Find supermarket by id",
        "description": "Returns a single supermarket",
        "operationId": "getSupermarket",
        "parameters": [
          {
            "name": "idSupermarket",
            "in": "path",
            "description": "ID of supermarket to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "supermarket"
        ],
        "summary": "Update an existing supermarket",
        "operationId": "updateSupermarket",
        "parameters": [
          {
            "name": "idSupermarket",
            "in": "path",
            "description": "Supermarket id to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Supermarket object that needs to be update to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Supermarket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "supermarket"
        ],
        "summary": "Delete supermarket",
        "operationId": "removeSupermarket",
        "parameters": [
          {
            "name": "idSupermarket",
            "in": "path",
            "description": "Supermarket id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError400"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "format": "int64"
          },
          "status": {
            "type": "integer",
            "format": "int64"
          },
          "body": {
            "type": "object",
            "format": "int32"
          }
        }
      },
      "ApiError400": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int64"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "stack": {
            "type": "string"
          }
        }
      },
      "ApiError404": {
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int64"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id_category": {
            "type": "integer",
            "format": "int64"
          },
          "id_subcategory": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "number",
            "multipleOf": 0.1
          },
          "id_measure": {
            "type": "integer",
            "format": "int64"
          },
          "url_image": {
            "type": "string"
          },
          "active": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "title",
          "description",
          "id_category",
          "id_subcategory",
          "quantity",
          "url_image"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "cateory": {
            "type": "string",
            "uniqueItems": true
          },
          "url_image": {
            "type": "string"
          },
          "active": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "cateory",
          "url_image"
        ]
      },
      "Subcategory": {
        "type": "object",
        "properties": {
          "id_category": {
            "type": "integer",
            "format": "int64"
          },
          "subcategory": {
            "type": "string"
          },
          "url_image": {
            "type": "string"
          },
          "active": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "id_category",
          "subcategory",
          "url_image"
        ]
      },
      "Measure": {
        "type": "object",
        "properties": {
          "measure": {
            "type": "string",
            "uniqueItems": true
          },
          "active": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "measure"
        ]
      },
      "AddUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "uniqueItems": true
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "rol": {
            "type": "string",
            "enum": [
              "admin",
              "customer",
              "super market"
            ]
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "firstName",
          "lastName",
          "rol",
          "password"
        ]
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "uniqueItems": true
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "rol": {
            "type": "string",
            "enum": [
              "admin",
              "customer",
              "super market"
            ]
          },
          "url_image": {
            "type": "string"
          },
          "active": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Supermarket": {
        "type": "object",
        "properties": {
          "supermarket": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          },
          "url_logo": {
            "type": "string"
          },
          "active": {
            "type": "string"
          },
          "id_user": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "supermarket",
          "address",
          "latitude",
          "longitude",
          "url_logo",
          "id_user"
        ]
      }
    }
  }
}